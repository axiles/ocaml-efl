#include "include.h"

/* Elementary Engine */

PREFIX value ml_elm_config_engine_get(value v_unit CAMLunused)
{
/* BEGIN: <= 1.12 */
        return safe_copy_string(elm_config_engine_get());
/* END */
/* BEGIN: 1.13 */
        return safe_copy_string(elm_config_accel_preference_get());
/* END */
}

PREFIX value ml_elm_config_engine_set(value v_engine)
{
/* BEGIN: <= 1.12 */
        elm_config_engine_set(String_val(v_engine));
/* END */
/* BEGIN: 1.13 */
        elm_config_accel_preference_set(String_val(v_engine));
/* END */
        return Val_unit;
}

PREFIX value ml_elm_config_preferred_engine_get(value v_unit CAMLunused)
{
/* BEGIN: <= 1.12 */
        return copy_string(elm_config_preferred_engine_get());
/* END */
/* BEGIN: 1.13 */
        return copy_string(elm_config_accel_preference_get());
/* END */
}

PREFIX value ml_elm_config_preferred_engine_set(value v_preferred_engine)
{
/* BEGIN: <= 1.12 */
        elm_config_preferred_engine_set(String_val(v_preferred_engine));
/* END */
/* BEGIN: 1.13 */
        elm_config_accel_preference_set(String_val(v_preferred_engine));
/* END */
        return Val_unit;
}


/* Elementary Fonts */

inline value copy_Elm_Text_Class(Elm_Text_Class* c)
{
        CAMLparam0();
        CAMLlocal1(v);
        Store_field(v, 0, copy_string(c->name));
        Store_field(v, 1, copy_string(c->desc));
        CAMLreturn(v);
}

value copy_Eina_List_Elm_Text_Class(const Eina_List* list);
inline value copy_Eina_List_Elm_Text_Class(const Eina_List* list)
{
        CAMLparam0();
        CAMLlocal3(v, v1, v_s);
        Eina_List* it;
        Elm_Text_Class* s;
        v = Val_int(0);
        EINA_LIST_REVERSE_FOREACH(list, it, s) {
                v1 = v;
                v_s = copy_Elm_Text_Class(s);
                v = caml_alloc(2, 0);
                Store_field(v, 0, v_s);
                Store_field(v, 1, v1);
        }
        CAMLreturn(v);
}

inline value copy_Elm_Font_Overlay(Elm_Font_Overlay* c)
{
        CAMLparam0();
        CAMLlocal1(v);
        Store_field(v, 0, copy_string(c->text_class));
        Store_field(v, 1, copy_string(c->font));
        Store_field(v, 2, Val_int(c->size));
        CAMLreturn(v);
}

value copy_Eina_List_Elm_Font_Overlay(const Eina_List* list);
inline value copy_Eina_List_Elm_Font_Overlay(const Eina_List* list)
{
        CAMLparam0();
        CAMLlocal3(v, v1, v_s);
        Eina_List* it;
        Elm_Font_Overlay* s;
        v = Val_int(0);
        EINA_LIST_REVERSE_FOREACH(list, it, s) {
                v1 = v;
                v_s = copy_Elm_Font_Overlay(s);
                v = caml_alloc(2, 0);
                Store_field(v, 0, v_s);
                Store_field(v, 1, v1);
        }
        CAMLreturn(v);
}

PREFIX value ml_elm_config_text_classes_list_get(value v_unit CAMLunused)
{
        Eina_List* l = elm_config_text_classes_list_get();
        value v_l = copy_Eina_List_Elm_Text_Class(l);
        elm_config_text_classes_list_free(l);
        return v_l;
}

PREFIX value ml_elm_config_font_overlay_list_get(value v_unit CAMLunused)
{
        return copy_Eina_List_Elm_Font_Overlay(
                elm_config_font_overlay_list_get());
}

/* Elementary Profile */

PREFIX value ml_elm_config_profile_dir_get(value v_profile, value v_is_user)
{
        const char* dir = elm_config_profile_dir_get(String_val(v_profile),
                Bool_val(v_is_user));
        value v_dir = copy_string(dir);
        elm_config_profile_dir_free(dir);
        return v_dir;
}

PREFIX value ml_elm_config_profile_list_get(value v_unit CAMLunused)
{
        Eina_List* list = elm_config_profile_list_get();
        value v_list = copy_Eina_List_string(list);
        elm_config_profile_list_free(list);
        return v_list;
}

/* BEGIN: 1.17 */
PREFIX value ml_elm_config_profile_list_full_get(value v_unit CAMLunused)
{
        Eina_List* list = elm_config_profile_list_full_get();
        value v_list = copy_Eina_List_string(list);
        elm_config_profile_list_free(list);
        return v_list;
}
/* END */

/* Fingers */

/* Focus */

/* Colors */

PREFIX value ml_elm_config_color_classes_list_get(value v_unit CAMLunused)
{
        Eina_List* list = elm_config_color_classes_list_get();
        value v_list = copy_Eina_List_Elm_Color_Class(list);
        elm_config_color_classes_list_free(list);
        return v_list;
}

PREFIX value ml_elm_config_color_overlay_list_get(value v_unit CAMLunused)
{
        return copy_Eina_List_Elm_Color_Overlay(
                elm_config_color_overlay_list_get());
}

/* Password show last */

/* Elementary Scrolling */

/* Widget Scaling */

