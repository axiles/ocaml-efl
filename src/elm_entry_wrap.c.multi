#include "include.h"

Evas_Object* ml_Elm_Entry_Item_Provider_Cb(
        void* data, Evas_Object* entry, const char* item)
{
        CAMLparam0();
        CAMLlocal3(v_entry, v_item, v_r);
        value* v_fun = data;
        v_entry = copy_Evas_Object(entry);
        v_item = copy_string(item);
        v_r = caml_callback2(*v_fun, v_entry, v_item);
        Evas_Object* r = Evas_Object_opt_val(v_r);
        CAMLreturnT(Evas_Object*, r);
}

void ml_Elm_Entry_Filter_Cb(void* data, Evas_Object* entry, char** text)
{
        CAMLparam0();
        CAMLlocal3(v_entry, v_text, v_r);
        value* v_fun = data;
        v_entry = copy_Evas_Object(entry);
        v_text = copy_string(*text);
        v_r = caml_callback2(*v_fun, v_entry, v_text);
        free(*text);
        if(v_r == Val_int(0)) *text = NULL;
        else {
                char const *text1 = String_val(Field(v_r, 0));
                *text = caml_stat_alloc(strlen(text1) + 1);
                strcpy(*text, text1);
        }
        CAMLreturn0;
}

inline Elm_Entry_Filter_Limit_Size
        Elm_Entry_Filter_Limit_Size_val(value v)
{
        Elm_Entry_Filter_Limit_Size ls;
        ls.max_char_count = Int_val(Field(v, 0));
        ls.max_byte_count = Int_val(Field(v, 1));
        return ls;
}

inline value
        copy_Elm_Entry_Filter_Limit_Size(Elm_Entry_Filter_Limit_Size ls)
{
        value v = caml_alloc(2, 0);
        Store_field(v, 0, Val_int(ls.max_char_count));
        Store_field(v, 1, Val_int(ls.max_byte_count));
        return v;
}

/* WARNING: You must not use the GC when using the result */
inline Elm_Entry_Filter_Accept_Set
        Elm_Entry_Filter_Accept_Set_val(value v)
{
        Elm_Entry_Filter_Accept_Set as;
        as.accepted = String_val(Field(v, 0));
        as.rejected = String_val(Field(v, 1));
        return as;
}

inline value
        copy_Elm_Entry_Filter_Accept_Set(Elm_Entry_Filter_Accept_Set as)
{
        CAMLparam0();
        CAMLlocal1(v);
        v = caml_alloc(2, 0);
        if(as.accepted == NULL) Store_field(v, 0, copy_string(""));
        else Store_field(v, 0, copy_string(as.accepted));
        if(as.rejected == NULL) Store_field(v, 1, copy_string(""));
        else Store_field(v, 1, copy_string(as.rejected));
        CAMLreturn(v);
}

PREFIX value ml_elm_entry_add(value v_parent)
{
        Evas_Object* entry = elm_entry_add(Evas_Object_val(v_parent));
        if(entry == NULL) caml_failwith("ml_elm_entry_add");
        return copy_Evas_Object(entry);
}

PREFIX value ml_elm_entry_text_style_user_peek(value v_obj)
{
        CAMLparam0();
        CAMLlocal1(v);
        const char* text = elm_entry_text_style_user_peek(
                Evas_Object_val(v_obj));
        if(text == NULL) return Val_int(0);
        v = caml_alloc(1, 0);
        Store_field(v, 0, copy_string(text));
        CAMLreturn(v);
}

PREFIX value ml_elm_entry_selection_get(value v_obj)
{
        CAMLparam0();
        CAMLlocal1(v);
        const char* text = elm_entry_selection_get(Evas_Object_val(v_obj));
        v = caml_alloc(1, 0);
        Store_field(v, 0, copy_string(text));
        CAMLreturn(v);
}

PREFIX value ml_elm_entry_cursor_content_get(value v_obj)
{
        char* text = elm_entry_cursor_content_get(Evas_Object_val(v_obj));
        value v = copy_string(text);
        free(text);
        return v;
}

PREFIX value ml_elm_entry_cursor_geometry_get(value v_obj)
{
        Evas_Coord x, y, w, h;
        if(!elm_entry_cursor_geometry_get(Evas_Object_val(v_obj), &x, &y, &w, &h))
                caml_failwith("elm_entry_cursor_geometry_get");
        value v = caml_alloc(4, 0);
        Store_field(v, 0, Val_int(x));
        Store_field(v, 1, Val_int(y));
        Store_field(v, 2, Val_int(w));
        Store_field(v, 3, Val_int(h));
        return v;
}

PREFIX value ml_elm_entry_context_menu_item_add(
        value v_obj, value v_label, value v_icon_file, value v_icon_type,
        value v_fun)
{
        Evas_Object* obj = Evas_Object_val(v_obj);
        value* data = ml_Evas_Object_register_value(obj, v_fun);
        elm_entry_context_menu_item_add(obj, String_val(v_label),
                String_val(v_icon_file), Elm_Icon_Type_val(v_icon_type),
                ml_Evas_Smart_Cb, data);
        return Val_unit;
}

PREFIX value ml_elm_entry_item_provider_append(value v_obj, value v_fun)
{
        Evas_Object* obj = Evas_Object_val(v_obj);
        value* data = ml_Evas_Object_register_value(obj, v_fun);
        elm_entry_item_provider_append(obj,
                ml_Elm_Entry_Item_Provider_Cb, data);
        return Val_unit;
}

PREFIX value ml_elm_entry_item_provider_prepend(value v_obj, value v_fun)
{
        Evas_Object* obj = Evas_Object_val(v_obj);
        value* data = ml_Evas_Object_register_value(obj, v_fun);
        elm_entry_item_provider_prepend(obj, ml_Elm_Entry_Item_Provider_Cb,
                data);
        return Val_unit;
}

PREFIX value ml_elm_entry_markup_filter_append(value v_obj, value v_fun)
{
        Evas_Object* obj = Evas_Object_val(v_obj);
        value* data = ml_Evas_Object_register_value(obj, v_fun);
        elm_entry_markup_filter_append(obj, ml_Elm_Entry_Filter_Cb, data);
        return Val_unit;
}

PREFIX value ml_elm_entry_markup_filter_prepend(value v_obj, value v_fun)
{
        Evas_Object* obj = Evas_Object_val(v_obj);
        value* data = ml_Evas_Object_register_value(obj, v_fun);
        elm_entry_markup_filter_prepend(obj, ml_Elm_Entry_Filter_Cb, data);
        return Val_unit;
}

PREFIX value ml_elm_entry_file_get(value v_obj)
{
        CAMLparam0();
        CAMLlocal1(v);
        const char* file;
        Elm_Text_Format format;
        elm_entry_file_get(Evas_Object_val(v_obj), &file, &format);
        v = caml_alloc(2, 0);
        Store_field(v, 0, copy_string(file));
        Store_field(v, 1, Val_Elm_Text_Format(format));
        CAMLreturn(v);
}

PREFIX value ml_elm_entry_filter_limit_size(
        value v_ls, value v_obj, value v_text)
{
        CAMLparam0();
        CAMLlocal1(v);
        char* text = caml_stat_alloc(strlen(String_val(v_text)) + 1);
        Elm_Entry_Filter_Limit_Size ls = Elm_Entry_Filter_Limit_Size_val(v_ls);
        strcpy(text, String_val(v_text));
        elm_entry_filter_limit_size(&ls, Evas_Object_val(v_obj), &text);
        if(text == NULL) v = Val_int(0);
        else {
                v = caml_alloc(1, 0);
                Store_field(v, 0, copy_string(text));
                caml_stat_free(text);
        }
        CAMLreturn(v);
}

PREFIX value ml_elm_entry_filter_accept_set(
        value v_as, value v_obj, value v_text)
{
        CAMLparam0();
        CAMLlocal1(v);
        char* text = caml_stat_alloc(strlen(String_val(v_text)) + 1);
        strcpy(text, String_val(v_text));
        Elm_Entry_Filter_Accept_Set as = Elm_Entry_Filter_Accept_Set_val(v_as);
        elm_entry_filter_accept_set(&as, Evas_Object_val(v_obj), &text);
        if(text == NULL) v = Val_int(0);
        else {
                v = caml_alloc(1, 0);
                Store_field(v, 0, copy_string(text));
                caml_stat_free(text);
        }
        CAMLreturn(v);
}

PREFIX value ml_elm_entry_anchor_hover_parent_get(value v_obj)
{
        Evas_Object* parent = elm_entry_anchor_hover_parent_get(
                Evas_Object_val(v_obj));
        return copy_Evas_Object_opt(parent);
}

PREFIX value ml_elm_entry_anchor_info_of_ptr(value v_ptr)
{
        Elm_Entry_Anchor_Info* info = voidp_val(v_ptr);
        return copy_Elm_Entry_Anchor_Info(info);
}

PREFIX value ml_elm_entry_anchor_hover_info_of_ptr(value v_ptr)
{
        Elm_Entry_Anchor_Hover_Info* info = voidp_val(v_ptr);
        return copy_Elm_Entry_Anchor_Hover_Info(info);
}

PREFIX value ml_elm_entry_select_region_get(value v_obj)
{
        value v;
        int start, end;
        elm_entry_select_region_get(Evas_Object_val(v_obj), &start, &end);
        v = caml_alloc(2, 0);
        Store_field(v, 0, Val_int(start));
        Store_field(v, 1, Val_int(end));
        return v;
}
