#include "include.h"

PREFIX void ml_Elm_Genlist_Item_Class(
        Elm_Gen_Item_Class** class, void** data, value v)
{
        Elm_Gen_Item_Class* c = elm_genlist_item_class_new();
        if(c == NULL) caml_raise_out_of_memory();

        c->item_style = String_val(Field(v, 0));
        c->func.text_get = ml_Elm_Gen_Item_Text_Get_Cb;
        c->func.content_get = ml_Elm_Gen_Item_Content_Get_Cb;
        c->func.state_get = ml_Elm_Gen_Item_State_Get_Cb;
        c->func.del = ml_Elm_Gen_Item_Del_Cb_free;
        c->func.reusable_content_get = ml_Elm_Gen_Item_Reusable_Content_Get_Cb;
        value* v_data = ml_register_value(v);

        *class = c;
        *data = v_data;
}

PREFIX value ml_elm_genlist_add(value v_parent)
{
        Evas_Object* obj = elm_genlist_add(Evas_Object_val(v_parent));
        if(obj == NULL) caml_failwith("elm_genlist_add");
        return copy_Evas_Object(obj);
}

PREFIX value ml_elm_genlist_item_append(
        value v_obj, value v_itc, value v_parent, value v_type, value v_func)
{
        Elm_Genlist_Item_Class* itc;
        void* data;
        ml_Elm_Genlist_Item_Class(&itc, &data, v_itc);

        Elm_Object_Item* parent = Elm_Object_Item_opt_val(v_parent);

        value* func_data = ml_register_value(v_func);

        Elm_Object_Item* item = elm_genlist_item_append(Evas_Object_val(v_obj),
                itc, data, parent, Elm_Genlist_Item_Type_val(v_type),
                ml_Evas_Smart_Cb, func_data);
        elm_genlist_item_class_free(itc);

        if(item == NULL) {
                ml_remove_value(data);
                ml_remove_value(func_data);
                caml_failwith("elm_genlist_item_append");
        }
        ml_Elm_Object_Item_gc_value(item, func_data);
        return copy_Elm_Object_Item(item);
}

PREFIX value ml_elm_genlist_item_prepend(
        value v_obj, value v_itc, value v_parent, value v_type, value v_func)
{
        Elm_Genlist_Item_Class* itc;
        void* data;
        ml_Elm_Genlist_Item_Class(&itc, &data, v_itc);

        Elm_Object_Item* parent = Elm_Object_Item_opt_val(v_parent);

        value* func_data = ml_register_value(v_func);

        Elm_Object_Item* item = elm_genlist_item_prepend(Evas_Object_val(v_obj),
                itc, data, parent, Elm_Genlist_Item_Type_val(v_type),
                ml_Evas_Smart_Cb, func_data);
        elm_genlist_item_class_free(itc);

        if(item == NULL) {
                ml_remove_value(data);
                ml_remove_value(func_data);
                caml_failwith("elm_genlist_item_prepend");
        }
        ml_Elm_Object_Item_gc_value(item, func_data);
        return copy_Elm_Object_Item(item);
}

PREFIX value ml_elm_genlist_item_insert_before_native(
        value v_obj, value v_itc, value v_parent, value v_before, value v_type,
        value v_func)
{
        Elm_Genlist_Item_Class* itc;
        void* data;
        ml_Elm_Genlist_Item_Class(&itc, &data, v_itc);

        Elm_Object_Item* parent = Elm_Object_Item_opt_val(v_parent);

        value* func_data = ml_register_value(v_func);

        Elm_Object_Item* item = elm_genlist_item_insert_before(
                Evas_Object_val(v_obj), itc, data, parent,
                Elm_Object_Item_val(v_before),
                Elm_Genlist_Item_Type_val(v_type),
                ml_Evas_Smart_Cb, func_data);
        elm_genlist_item_class_free(itc);

        if(item == NULL) {
                ml_remove_value(data);
                ml_remove_value(func_data);
                caml_failwith("elm_genlist_item_insert_before");
        }
        ml_Elm_Object_Item_gc_value(item, func_data);
        return copy_Elm_Object_Item(item);
}

PREFIX value ml_elm_genlist_item_insert_before_byte(value* argv, int argn CAMLunused)
{
        return ml_elm_genlist_item_insert_before_native(argv[0], argv[1],
                argv[2], argv[3], argv[4], argv[5]);
}

PREFIX value ml_elm_genlist_item_insert_after_native(
        value v_obj, value v_itc, value v_parent, value v_after, value v_type,
        value v_func)
{
        Elm_Genlist_Item_Class* itc;
        void* data;
        ml_Elm_Genlist_Item_Class(&itc, &data, v_itc);

        Elm_Object_Item* parent = Elm_Object_Item_opt_val(v_parent);

        value* func_data = ml_register_value(v_func);

        Elm_Object_Item* item = elm_genlist_item_insert_after(
                Evas_Object_val(v_obj), itc, data, parent,
                Elm_Object_Item_val(v_after), Elm_Genlist_Item_Type_val(v_type),
                ml_Evas_Smart_Cb, func_data);
        elm_genlist_item_class_free(itc);

        if(item == NULL) {
                ml_remove_value(data);
                ml_remove_value(func_data);
                caml_failwith("elm_genlist_item_insert_after");
        }
        ml_Elm_Object_Item_gc_value(item, func_data);
        return copy_Elm_Object_Item(item);
}

PREFIX value ml_elm_genlist_item_insert_after_byte(value* argv, int argn CAMLunused)
{
        return ml_elm_genlist_item_insert_after_native(argv[0], argv[1],
                argv[2], argv[3], argv[4], argv[5]);
}

PREFIX value ml_elm_genlist_selected_item_get(value v_obj)
{
        Elm_Object_Item* item = elm_genlist_selected_item_get(
                Evas_Object_val(v_obj));
        return copy_Elm_Object_Item_opt(item);
}

PREFIX value ml_elm_genlist_search_by_text_item_get(
        value v_obj, value v_item_start_from, value v_part_name,
        value v_pattern, value v_flags)
{
        return copy_Elm_Object_Item_opt(elm_genlist_search_by_text_item_get(
                Evas_Object_val(v_obj),
                Elm_Object_Item_opt_val(v_item_start_from),
                String_val(v_part_name), String_val(v_pattern),
                Elm_Glob_Match_Flags_val_list(v_flags)));
}

PREFIX value ml_elm_genlist_selected_items_get(value v_obj)
{
        return copy_Eina_List_Elm_Object_Item(elm_genlist_selected_items_get(
                Evas_Object_val(v_obj)));
}

PREFIX value ml_elm_genlist_realized_items_get(value v_obj)
{
        Eina_List* list = elm_genlist_realized_items_get(
                Evas_Object_val(v_obj));
        value v = copy_Eina_List_Elm_Object_Item(list);
        eina_list_free(list);
        return v;
}

PREFIX value ml_elm_genlist_first_item_get(value v_obj)
{
        Elm_Object_Item* item = elm_genlist_first_item_get(
                Evas_Object_val(v_obj));
        return copy_Elm_Object_Item_opt(item);
}

PREFIX value ml_elm_genlist_last_item_get(value v_obj)
{
        Elm_Object_Item* item = elm_genlist_last_item_get(
                Evas_Object_val(v_obj));
        return copy_Elm_Object_Item_opt(item);
}

PREFIX value ml_elm_genlist_item_next_get(value v_it)
{
        Elm_Object_Item* next = elm_genlist_item_next_get(
                Elm_Object_Item_val(v_it));
        return copy_Elm_Object_Item_opt(next);
}

PREFIX value ml_elm_genlist_item_prev_get(value v_it)
{
        Elm_Object_Item* prev = elm_genlist_item_prev_get(
                Elm_Object_Item_val(v_it));
        return copy_Elm_Object_Item_opt(prev);
}

PREFIX value ml_elm_genlist_item_tooltip_content_cb_set(
        value v_it, value v_func, value v_del_cb)
{
        CAMLparam3(v_it, v_func, v_del_cb);
        value* data = caml_stat_alloc(sizeof(value));
        *data = caml_alloc(2, 0);
        Store_field(*data, 0, v_func);
        Store_field(*data, 1, v_del_cb);
        caml_register_generational_global_root(data);
        elm_genlist_item_tooltip_content_cb_set(Elm_Object_Item_val(v_it),
                ml_Elm_Tooltip_Item_Content_Cb_0, data,
                ml_Evas_Smart_Cb_1_free);
        CAMLreturn(Val_unit);
}

PREFIX value ml_elm_genlist_item_cursor_get(value v_it)
{
        CAMLparam1(v_it);
        CAMLlocal1(v_cursor);
        const char* cursor =
                elm_genlist_item_cursor_get(Elm_Object_Item_val(v_it));
        if(cursor == NULL) v_cursor = Val_int(0);
        else {
                v_cursor = caml_alloc(1, 0);
                Store_field(v_cursor, 0, copy_string(cursor));
        }
        CAMLreturn(v_cursor);
}

PREFIX value ml_elm_genlist_item_cursor_style_get(value v_it)
{
        CAMLparam1(v_it);
        CAMLlocal1(v_style);
        const char* style =
                elm_genlist_item_cursor_style_get(Elm_Object_Item_val(v_it));
        if(style == NULL) v_style = Val_int(0);
        else {
                v_style = caml_alloc(1, 0);
                Store_field(v_style, 0, copy_string(style));
        }
        CAMLreturn(v_style);
}

PREFIX value ml_elm_genlist_at_xy_item_get(value v_obj, value v_x, value v_y)
{
        CAMLparam3(v_obj, v_x, v_y);
        CAMLlocal2(v_item, v_r);
        Elm_Object_Item* item;
        int posret;
        item = elm_genlist_at_xy_item_get(Evas_Object_val(v_obj),
                Int_val(v_x), Int_val(v_y), &posret);
        if(item == NULL) {
                v_r = Val_int(0);
        } else {
                v_item = caml_alloc(2, 0);
                Store_field(v_item, 0, copy_Elm_Object_Item(item));
                Store_field(v_item, 1, Val_int(posret));
                v_r = caml_alloc(1, 0);
                Store_field(v_r, 0, v_item);
        }
        CAMLreturn(v_r);
}

PREFIX value ml_elm_genlist_item_parent_get(value v_it)
{
        Elm_Object_Item* parent = elm_genlist_item_parent_get(
                Elm_Object_Item_val(v_it));
        return copy_Elm_Object_Item_opt(parent);
}

PREFIX value ml_elm_genlist_item_subitems_get(value v_it)
{
        return copy_Eina_List_Elm_Object_Item(elm_genlist_item_subitems_get(
                Elm_Object_Item_val(v_it)));
}

PREFIX value ml_elm_genlist_item_all_contents_unset(value v_it)
{
        Eina_List* list;
        elm_genlist_item_all_contents_unset(Elm_Object_Item_val(v_it), &list);
        return copy_Eina_List_Elm_Object_Item(list);
}

PREFIX value ml_elm_genlist_decorated_item_get(value v_obj)
{
        Elm_Object_Item* it = elm_genlist_decorated_item_get(
                Evas_Object_val(v_obj));
        return copy_Elm_Object_Item_opt(it);
}

PREFIX value ml_elm_genlist_nth_item_get(value v_obj, value v_k)
{
        Elm_Object_Item* it = elm_genlist_nth_item_get(Evas_Object_val(v_obj),
                Int_val(v_k));
        return copy_Elm_Object_Item_opt(it);
}

