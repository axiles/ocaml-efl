#include "include.h"

inline Elm_GLView_Mode Elm_GLView_Mode_val_list(value v)
{
        value v_tmp = v;
        Elm_GLView_Mode m = ELM_GLVIEW_NONE;
        while(v_tmp != Val_int(0)) {
                m = m | Elm_GLView_Mode_val(Field(v_tmp, 0));
                v_tmp = Field(v_tmp, 1);
        }
        return m;
}

void ml_Elm_GLView_Func_Cb_init(Evas_Object* obj)
{
        CAMLparam0();
        CAMLlocal1(v_obj);
        static value const *v_fun = NULL;
        if(v_fun == NULL) v_fun = caml_named_value("Elm_GLView_Func_Cb_init");
        v_obj = copy_Evas_Object(obj);
        caml_callback(*v_fun, v_obj);
        CAMLreturn0;
}

void ml_Elm_GLView_Func_Cb_del(Evas_Object* obj)
{
        CAMLparam0();
        CAMLlocal1(v_obj);
        static value const *v_fun = NULL;
        if(v_fun == NULL) v_fun = caml_named_value("Elm_GLView_Func_Cb_del");
        v_obj = copy_Evas_Object(obj);
        caml_callback(*v_fun, v_obj);
        CAMLreturn0;
}

void ml_Elm_GLView_Func_Cb_resize(Evas_Object* obj)
{
        CAMLparam0();
        CAMLlocal1(v_obj);
        static value const *v_fun = NULL;
        if(v_fun == NULL) v_fun = caml_named_value("Elm_GLView_Func_Cb_resize");
        v_obj = copy_Evas_Object(obj);
        caml_callback(*v_fun, v_obj);
        CAMLreturn0;
}

void ml_Elm_GLView_Func_Cb_render(Evas_Object* obj)
{
        CAMLparam0();
        CAMLlocal1(v_obj);
        static value const *v_fun = NULL;
        if(v_fun == NULL) v_fun = caml_named_value("Elm_GLView_Func_Cb_render");
        v_obj = copy_Evas_Object(obj);
        caml_callback(*v_fun, v_obj);
        CAMLreturn0;
}

PREFIX value ml_elm_glview_add(value v_parent)
{
        Evas_Object* obj = elm_glview_add(Evas_Object_val(v_parent));
        if(obj == NULL) caml_failwith("elm_glview_add");
        elm_glview_init_func_set(obj , ml_Elm_GLView_Func_Cb_init);
        elm_glview_del_func_set(obj , ml_Elm_GLView_Func_Cb_del);
        elm_glview_resize_func_set(obj , ml_Elm_GLView_Func_Cb_resize);
        elm_glview_render_func_set(obj , ml_Elm_GLView_Func_Cb_render);
        return copy_Evas_Object(obj);
}

PREFIX value ml_elm_glview_version_add(value v_parent, value v_version)
{
        Evas_Object* obj = elm_glview_version_add(Evas_Object_val(v_parent),
                Evas_GL_Context_Version_val(v_version));
        if(obj == NULL) caml_failwith("elm_glview_version_add");
        elm_glview_init_func_set(obj , ml_Elm_GLView_Func_Cb_init);
        elm_glview_del_func_set(obj , ml_Elm_GLView_Func_Cb_del);
        elm_glview_resize_func_set(obj , ml_Elm_GLView_Func_Cb_resize);
        elm_glview_render_func_set(obj , ml_Elm_GLView_Func_Cb_render);
        return copy_Evas_Object(obj);
}

PREFIX value ml_elm_glview_size_get(value v_obj)
{
        Evas_Coord w, h;
        elm_glview_size_get(Evas_Object_val(v_obj), &w, &h);
        value v_r = caml_alloc(2, 0);
        Store_field(v_r, 0, Val_int(w));
        Store_field(v_r, 1, Val_int(h));
        return v_r;
}

PREFIX value ml_elm_glview_gl_api_get(value v_obj)
{
        return copy_Evas_GL_API(elm_glview_gl_api_get(Evas_Object_val(v_obj)));
}

PREFIX value ml_elm_glview_evas_gl_get(value v_obj)
{
        return copy_Evas_GL(elm_glview_evas_gl_get(Evas_Object_val(v_obj)));
}

PREFIX value ml_elm_glview_rotation_get(value v_obj)
{
        return Val_int(elm_glview_rotation_get(Evas_Object_val(v_obj)));
}

PREFIX value ml_elm_glview_mode_set(value v_obj, value v_m)
{
        elm_glview_mode_set(Evas_Object_val(v_obj),
                Elm_GLView_Mode_val_list(v_m));
        return Val_unit;
}

