#include "include.h"

PREFIX value ml_elm_slider_add(value v_parent)
{
        Evas_Object* obj = elm_slider_add(Evas_Object_val(v_parent));
        if(obj == NULL) caml_failwith("elm_slider_add");
        return copy_Evas_Object(obj);
}

PREFIX value ml_elm_slider_unit_format_set(value v_obj, value v_fmt)
{
        elm_slider_unit_format_set(Evas_Object_val(v_obj), String_val(v_fmt));
        return Val_unit;
}

PREFIX value ml_elm_slider_indicator_format_set(value v_obj, value v_fmt)
{
        elm_slider_indicator_format_set(Evas_Object_val(v_obj),
                String_val(v_fmt));
        return Val_unit;
}

PREFIX value ml_elm_slider_min_max_get(value v_obj)
{
        CAMLparam1(v_obj);
        CAMLlocal1(v_r);
        double min, max;
        elm_slider_min_max_get(Evas_Object_val(v_obj), &min, &max);
        v_r = caml_alloc(2, 0);
        Store_field(v_r, 0, copy_double(min));
        Store_field(v_r, 1, copy_double(max));
        CAMLreturn(v_r);
}

PREFIX value ml_elm_slider_range_get(value v_obj)
{
        CAMLparam1(v_obj);
        CAMLlocal1(v_r);
        double from, to;
        elm_slider_range_get(Evas_Object_val(v_obj), &from, &to);
        v_r = caml_alloc(2, 0);
        Store_field(v_r, 0, copy_double(from));
        Store_field(v_r, 1, copy_double(to));
        CAMLreturn(v_r);
}
