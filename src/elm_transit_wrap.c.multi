#include "include.h"

void ml_Elm_Transit_Effect_Transition_Cb(
        Elm_Transit_Effect* effect, Elm_Transit* tr, double progress)
{
        CAMLparam0();
        CAMLlocal2(v_tr, v_progress);
        value* v_fun = effect;
        v_tr = copy_Elm_Transit(tr);
        v_progress = copy_double(progress);
        caml_callback2(*v_fun, v_tr, v_progress);
        CAMLreturn0;
}

void ml_Elm_Transit_Effect_End_Cb_free_only(
        Elm_Transit_Effect* effect, Elm_Transit* tr CAMLunused)
{
        value* v_fun = effect;
        ml_remove_value(v_fun);
}

void ml_Elm_Transit_Del_Cb(void* data, Elm_Transit* tr)
{
        CAMLparam0();
        CAMLlocal1(v_tr);
        value* v_fun = data;
        v_tr = copy_Elm_Transit(tr);
        caml_callback(*v_fun, v_tr);
        ml_remove_value(v_fun);
        CAMLreturn0;
}

value copy_Eina_List_Elm_Transit(const Eina_List* list);
inline value copy_Eina_List_Elm_Transit(const Eina_List* list)
{
        CAMLparam0();
        CAMLlocal3(v, v1, v_tr);
        Eina_List* it;
        Elm_Transit* tr;
        v = Val_int(0);
        EINA_LIST_REVERSE_FOREACH(list, it, tr) {
                v1 = v;
                v = caml_alloc(2, 0);
                v_tr = copy_Elm_Transit(tr);
                Store_field(v, 0, v_tr);
                Store_field(v, 1, v1);
        }
        CAMLreturn(v);
}

PREFIX value ml_elm_transit_add(value v_unit CAMLunused)
{
        Elm_Transit* tr = elm_transit_add();
        if(tr == NULL) caml_failwith("elm_transit_add");
        return copy_Elm_Transit(tr);
}

PREFIX value ml_elm_transit_effect_add(value v_tr, value v_fun)
{
        CAMLparam2(v_tr, v_fun);
        value* data = caml_stat_alloc(sizeof(value));
        *data = v_fun;
        elm_transit_effect_add(Elm_Transit_val(v_tr),
                ml_Elm_Transit_Effect_Transition_Cb, data,
                ml_Elm_Transit_Effect_End_Cb_free_only);
        CAMLreturn(Val_unit);
}

PREFIX value ml_elm_transit_objects_get(value v_tr)
{
        return copy_Eina_List_Evas_Object(elm_transit_objects_get(
                Elm_Transit_val(v_tr)));
}

PREFIX value ml_elm_transit_del_cb_set(value v_tr, value v_fun)
{
        value* data = ml_register_value(v_fun);
        elm_transit_del_cb_set(Elm_Transit_val(v_tr), ml_Elm_Transit_Del_Cb,
                data);
        return Val_unit;
}

PREFIX value ml_elm_transit_tween_mode_factor_get(value v_tr)
{
        CAMLparam1(v_tr);
        CAMLlocal1(v_r);
        double v1, v2;
        elm_transit_tween_mode_factor_get(Elm_Transit_val(v_tr), &v1, &v2);
        v_r = caml_alloc(2, 0);
        Store_field(v_r, 0, copy_double(v1));
        Store_field(v_r, 1, copy_double(v2));
        CAMLreturn(v_r);
}

PREFIX value ml_elm_transit_tween_mode_factor_n_set(value v_tr, value v_a)
{
        unsigned int size = Wosize_val(v_a);
        double a[size];
        unsigned int i;
        for(i = 0; i < size; i++) a[i] = Double_val(Field(v_a, i));
        elm_transit_tween_mode_factor_n_set(Elm_Transit_val(v_tr), size, a);
        return Val_unit;
}

PREFIX value ml_elm_transit_chain_transits_get(value v_tr)
{
        return copy_Eina_List_Elm_Transit(elm_transit_chain_transits_get(
                Elm_Transit_val(v_tr)));
}

PREFIX value ml_elm_transit_effect_image_animation_add(value v_tr, value v_list)
{
        elm_transit_effect_image_animation_add(Elm_Transit_val(v_tr),
                Eina_List_string_val(v_list));
        return Val_unit;
}

