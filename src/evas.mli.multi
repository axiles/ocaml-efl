(** Evas *)

type ptr

type obj

type t

type smart_cb = obj -> ptr -> unit

type modifier

type callback_priority = [`after | `before | `default | `other of int]

type gl

(* BEGIN: 1.12 *)
type gl_context_version = [
| `gles_1_x
| `gles_2_x
| `gles_3_x
]
(* END *)

(* BEGIN: 1.14 *)
type image_orient = [
| `orient_none
| `orient_90
| `orient_180
| `orient_270
| `flip_horizontal
| `flip_vertical
| `flip_transpose
| `flip_transverse
]
(* END *)

module Point : sig
  type t = {x : int; y : int}
end

type point = Point.t

module Coord_point : sig
  type t = {x : int; y : int}
end

type coord_point = Coord_point.t

module Position : sig
  type t = {output : point; canvas : coord_point}
end

type position = Position.t

module Button_flags : sig
  type t = {double_click : bool; triple_click : bool}
end

type coord_rectangle = int * int * int * int

type button_flags = Button_flags.t

type device

module Coord_precision_point : sig
  type t = {x : int; y : int; xsub : float; ysub : float}
end

type coord_precision_point = Coord_precision_point.t

module Precision_position : sig
  type t = {output : point; canvas : coord_precision_point}
end

type precision_position = Precision_position.t

type aspect_control = [`none | `neither | `horizontal | `vertical | `both]

module Signal : sig
  type 'a t
  type 'a v = (obj -> 'a -> unit) t
  type 'a r = (obj -> 'a) t
  type u = (obj -> unit) t
  val create : string -> (ptr -> 'a) -> 'a v
  val create_unit : string -> u
  val create_ref : string -> (ptr -> 'a -> unit) -> 'a r
  val get_name : 'a t -> string
  val get_cb : 'a t -> 'a -> smart_cb
end 

type load_error = [
  | `none
  | `generic
  | `does_not_exist
  | `permission_denied
  | `resource_allocation_failed
  | `corrupt_file
  | `unknown_format
(* BEGIN: 1.19 *)
  | `cancelled
(* END *)
]

type gl_api

type map

type display_mode = [`none | `compress | `expand | `dont_change]

type render_op = [
  | `blend
  | `blend_rel
  | `copy
  | `copy_rel
  | `add
  | `add_rel
  | `sub
  | `sub_rel
  | `tint
  | `tint_rel
  | `mask
  | `mul
]

val hint_expand : float

val hint_fill : float

val string_of_ptr : ptr -> string

val string_opt_of_ptr : ptr -> string option

val pointer_canvas_xy_get : t -> int * int

val smart_objects_calculate : t -> unit

val bool_of_ptr : ptr -> bool

val string_string_of_ptr : ptr -> string * string

val store_ptr_bool : ptr -> bool -> unit

val obj_of_ptr : ptr -> obj

val float_of_ptr : ptr -> float

(** {2 Top Level Functions} *)

type alloc_error = [`none | `fatal | `recovered]

val init : unit -> int

val shutdown : unit -> int

val alloc_error : unit -> alloc_error

val async_events_fd_get : unit -> int

val async_events_process : unit -> int

(** {2 Render Engine Functions} *)

val render_method_lookup : string -> int

val render_method_list : unit -> string list

val output_method_set : t -> int -> unit

val output_method_get : t -> int

(** {2 Coordinate Mapping Functions} *)

val coord_screen_x_to_world : t -> int -> int

val coord_screen_y_to_world : t -> int -> int

val coord_world_x_to_screen : t -> int -> int

val coord_world_y_to_screen : t -> int -> int

(** {2 Output and Viewport Resizing Functions} *)

val output_size_set : t -> int -> int -> unit

val output_size_get : t -> int * int

val output_viewport_set : t -> int -> int -> int -> int -> unit

val output_viewport_get : t -> int * int * int * int

val output_framespace_set : t -> int -> int -> int -> int -> unit

val output_framespace_get : t -> int * int * int * int

(** {2 Image Functions} *)

val image_cache_flush : t -> unit

val image_cache_reload : t -> unit

val image_cache_set : t -> int -> unit

val image_cache_get : t -> int

val image_max_size_get : t -> (int * int) option

(** {2 General Canvas Functions} *)

val new_ : unit -> t

val free : t -> unit

val focus_in : t -> unit

val focus_out : t -> unit

val focus_state_get : t -> bool

val nochange_push : t -> unit

val nochange_pop : t -> unit

val damage_rectangle_add : t -> int -> int -> int -> int -> unit

val obscured_rectangle_add : t -> int -> int -> int -> int -> unit

val obscured_clear : t -> unit

val render_async : t -> bool

val render_updates : t -> (int * int * int * int) list

val render : t -> unit

val norender : t -> unit

val render_idle_flush : t -> unit

val render_dump : t -> unit

(** {2 Input Feeding functions} *)

val device_add : t -> device

val device_del : device -> unit

val device_push : t -> device -> unit

val device_pop : t -> unit

val device_list : t -> device option -> device list

val device_name_set : device -> string -> unit

val device_name_get : device -> string option

val device_description_set : device -> string -> unit

val device_description_get : device -> string option

val device_parent_set : device -> device option -> unit

val device_parent_get : device -> device option

(** {2 Finding Objects} *)

val focus_get : t -> obj option

val objects_at_xy_get : t -> int -> int -> bool -> bool -> obj list

val objects_in_rectangle_get :
  t -> int -> int -> int -> int -> bool -> bool -> obj list

(** {2 Shared Image Cache Server} *)

type cserve_stats = {
  saved_memory : int;
  wasted_memory : int;
  saved_memory_peak : int;
  wasted_memory_peak : int;
  saved_time_image_header_load : float;
  saved_time_image_data_load : float;
}

type cserve_config = {
  cache_max_usage : int;
  cache_item_timeout : int;
  cache_item_timeout_check : int;
}

val cserve_want_get : unit -> bool

val cserve_connected_get : unit -> bool

val cserve_stats_get : unit -> cserve_stats option

val cserve_config_get : unit -> cserve_config option

val cserve_config_set : cserve_config -> bool

val cserve_disconnected : unit -> unit

(** {2 General Utilites} *)

val load_error_str : load_error -> string

val color_hsv_to_rgb : float -> float -> float -> int * int * int

val color_rgb_to_hsv : int -> int -> int -> float * float * float

val color_argb_premul : int -> int -> int -> int -> int * int * int

val color_argb_unpremul : int -> int -> int -> int -> int * int * int

val data_argb_premul : int array -> unit

val data_argb_unpremul : int array -> unit

val string_char_next_get : string -> int -> int * Int32.t

val string_char_prev_get : string -> int -> int * Int32.t

val string_char_len_get : string -> int

